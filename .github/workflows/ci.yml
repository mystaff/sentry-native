name: CI

on:
  push:
    branches:
      - master
      - "release/**"
  pull_request:

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: make style

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v2

      - name: Get Version
        env:
          SHA: ${{ github.sha }}
        run: |
          export VERSION=$(cat include/sentry.h | grep "SENTRY_SDK_VERSION \"" | awk -F'"' '{print $2}')
          echo TAG=$VERSION-$SHA >> $GITHUB_ENV

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.TAG }}
          release_name: Release ${{ env.TAG }}
          draft: false
          prerelease: false

      - name: Prepare Upload Url
        env:
          URL: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        run: |
          echo $URL > UPLOAD_URL
          echo $TAG > TAG

      - name: Share Upload Url
        uses: actions/upload-artifact@v2
        with:
          name: upload_url
          path: |
            UPLOAD_URL
            TAG

  build:
    needs: [lint, create-release]
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Linux (gcc 10)
            os: ubuntu-20.04
            CC: gcc-10
            CXX: g++-10
          - name: macOS (xcode)
            os: macOs-latest
            ERROR_ON_WARNINGS: 1
          - name: Windows (VS2017, 32bit)
            os: vs2017-win2016
          - name: Windows (latest)
            os: windows-latest

    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}

    env:
      ERROR_ON_WARNINGS: ${{ matrix.ERROR_ON_WARNINGS }}

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - uses: actions/setup-python@v2

      - name: Installing Linux Dependencies
        if: ${{ runner.os == 'Linux' }}
        # workaround: https://github.com/actions/virtual-environments/issues/1536#issuecomment-698537248
        run: |
          sudo apt update
          sudo apt install clang-10 clang-tools g++-10 libcurl4-openssl-dev

      - name: Building (Windows)
        if: ${{ runner.os == 'Windows' }}
        env:
          MOS: ${{ matrix.os }}
        shell: bash
        run: |
          if [[ -v MOS ]] && [[ $MOS == "vs2017-win2016" ]]; then ARCH=Win32; else ARCH=x64; fi
          echo ARCH=$ARCH >> $GITHUB_ENV
          cmake --version
          cmake -B build-release -DSENTRY_BUILD_SHARED_LIBS=OFF -DSENTRY_BACKEND=breakpad -A $ARCH
          cmake --build build-release --parallel --config Release
          cmake --install build-release --prefix release --config Release
          cmake -B build-debug -DSENTRY_BUILD_SHARED_LIBS=OFF -DSENTRY_BACKEND=breakpad -A $ARCH
          cmake --build build-debug --parallel --config Debug
          cmake --install build-debug --prefix debug --config Debug

      - name: Building (Linux)
        if: ${{ runner.os == 'Linux' }}
        shell: bash
        run: |
          cmake --version
          cmake -B build -DSENTRY_BUILD_SHARED_LIBS=OFF -DSENTRY_BACKEND=breakpad
          cmake --build build --parallel --config Release
          cmake --install build --prefix install --config Release

      - name: Building (macOS)
        if: ${{ runner.os == 'macOS' }}
        env:
          MACOS_DEPLOYMENT_TARGET: 10.13
        shell: bash
        run: |
          cmake --version
          cmake -B build -DSENTRY_BUILD_SHARED_LIBS=OFF -DSENTRY_BACKEND=crashpad
          cmake --build build --parallel --config Release
          cmake --install build --prefix install --config Release

      - name: Zip Release (Windows)
        if: ${{ runner.os == 'Windows' }}
        shell: bash
        run: |
          rm -rf ./release/include
          rm -rf ./debug/include
          mv ./release/lib ./release/release
          mv ./release ./lib
          mv ./debug/lib ./lib/debug
          powershell Compress-Archive ./lib sentry-native.zip
          powershell Compress-Archive ./include -Update sentry-native.zip

      - name: Zip Release (Unix)
        if: ${{ runner.os == 'macOS' || runner.os == 'Linux' }}
        shell: bash
        run: |
          cd install && zip -r ../sentry-native.zip . && cd ..

      - name: Download Upload Url
        uses: actions/download-artifact@v2
        with:
          name: upload_url

      - name: Setup Environment
        shell: bash
        run: |
          TAG=$(cat TAG)
          URL=$(cat UPLOAD_URL)
          echo TAG=$TAG >> $GITHUB_ENV
          echo URL=$URL >> $GITHUB_ENV

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.URL }}
          asset_path: './sentry-native.zip'
          asset_name: 'sentry-native-${{ env.TAG }}-${{ runner.os }}${{ env.ARCH }}.zip'
          asset_content_type: application/zip

